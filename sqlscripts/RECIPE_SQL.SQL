/* 
CODE FILE TO CREATE A TABLE THAT HAS RECIPE_ID, MEASUREMENT, AND INGREDIENT
*/

-- PARSE MAIN TABLE INTO MAX INGREDIENTS
CREATE TABLE tmp_ingredients (
	select RECIPE_ID,
	REGEXP_SUBSTR(INGREDIENTS, '([1-9][0-9]*(?:\/[1-9][0-9])*|[\\u2150-\\u215E-\\u00BC-\\u00BE])(.+?(?=\\n))',1) AS ING_1,
	REGEXP_SUBSTR(INGREDIENTS, '([1-9][0-9]*(?:\/[1-9][0-9])*|[\\u2150-\\u215E-\\u00BC-\\u00BE])(.+?(?=\\n))',1,2) AS ING_2,
	REGEXP_SUBSTR(INGREDIENTS, '([1-9][0-9]*(?:\/[1-9][0-9])*|[\\u2150-\\u215E-\\u00BC-\\u00BE])(.+?(?=\\n))',1,3) AS ING_3,
	REGEXP_SUBSTR(INGREDIENTS, '([1-9][0-9]*(?:\/[1-9][0-9])*|[\\u2150-\\u215E-\\u00BC-\\u00BE])(.+?(?=\\n))',1,4) AS ING_4,
	REGEXP_SUBSTR(INGREDIENTS, '([1-9][0-9]*(?:\/[1-9][0-9])*|[\\u2150-\\u215E-\\u00BC-\\u00BE])(.+?(?=\\n))',1,5) AS ING_5,
	REGEXP_SUBSTR(INGREDIENTS, '([1-9][0-9]*(?:\/[1-9][0-9])*|[\\u2150-\\u215E-\\u00BC-\\u00BE])(.+?(?=\\n))',1,6) AS ING_6,
	REGEXP_SUBSTR(INGREDIENTS, '([1-9][0-9]*(?:\/[1-9][0-9])*|[\\u2150-\\u215E-\\u00BC-\\u00BE])(.+?(?=\\n))',1,7) AS ING_7,
	REGEXP_SUBSTR(INGREDIENTS, '([1-9][0-9]*(?:\/[1-9][0-9])*|[\\u2150-\\u215E-\\u00BC-\\u00BE])(.+?(?=\\n))',1,8) AS ING_8,
	REGEXP_SUBSTR(INGREDIENTS, '([1-9][0-9]*(?:\/[1-9][0-9])*|[\\u2150-\\u215E-\\u00BC-\\u00BE])(.+?(?=\\n))',1,9) AS ING_9,
	REGEXP_SUBSTR(INGREDIENTS, '([1-9][0-9]*(?:\/[1-9][0-9])*|[\\u2150-\\u215E-\\u00BC-\\u00BE])(.+?(?=\\n))',1,10) AS ING_10,
	REGEXP_SUBSTR(INGREDIENTS, '([1-9][0-9]*(?:\/[1-9][0-9])*|[\\u2150-\\u215E-\\u00BC-\\u00BE])(.+?(?=\\n))',1,12) AS ING_12,
	REGEXP_SUBSTR(INGREDIENTS, '([1-9][0-9]*(?:\/[1-9][0-9])*|[\\u2150-\\u215E-\\u00BC-\\u00BE])(.+?(?=\\n))',1,13) AS ING_13,
	REGEXP_SUBSTR(INGREDIENTS, '([1-9][0-9]*(?:\/[1-9][0-9])*|[\\u2150-\\u215E-\\u00BC-\\u00BE])(.+?(?=\\n))',1,14) AS ING_14,
	REGEXP_SUBSTR(INGREDIENTS, '([1-9][0-9]*(?:\/[1-9][0-9])*|[\\u2150-\\u215E-\\u00BC-\\u00BE])(.+?(?=\\n))',1,15) AS ING_15,
	REGEXP_SUBSTR(INGREDIENTS, '([1-9][0-9]*(?:\/[1-9][0-9])*|[\\u2150-\\u215E-\\u00BC-\\u00BE])(.+?(?=\\n))',1,16) AS ING_16,
	REGEXP_SUBSTR(INGREDIENTS, '([1-9][0-9]*(?:\/[1-9][0-9])*|[\\u2150-\\u215E-\\u00BC-\\u00BE])(.+?(?=\\n))',1,17) AS ING_17,
	REGEXP_SUBSTR(INGREDIENTS, '([1-9][0-9]*(?:\/[1-9][0-9])*|[\\u2150-\\u215E-\\u00BC-\\u00BE])(.+?(?=\\n))',1,18) AS ING_18,
	REGEXP_SUBSTR(INGREDIENTS, '([1-9][0-9]*(?:\/[1-9][0-9])*|[\\u2150-\\u215E-\\u00BC-\\u00BE])(.+?(?=\\n))',1,19) AS ING_19,
	REGEXP_SUBSTR(INGREDIENTS, '([1-9][0-9]*(?:\/[1-9][0-9])*|[\\u2150-\\u215E-\\u00BC-\\u00BE])(.+?(?=\\n))',1,20) AS ING_20,
	REGEXP_SUBSTR(INGREDIENTS, '([1-9][0-9]*(?:\/[1-9][0-9])*|[\\u2150-\\u215E-\\u00BC-\\u00BE])(.+?(?=\\n))',1,21) AS ING_21,
	REGEXP_SUBSTR(INGREDIENTS, '([1-9][0-9]*(?:\/[1-9][0-9])*|[\\u2150-\\u215E-\\u00BC-\\u00BE])(.+?(?=\\n))',1,22) AS ING_22,
	REGEXP_SUBSTR(INGREDIENTS, '([1-9][0-9]*(?:\/[1-9][0-9])*|[\\u2150-\\u215E-\\u00BC-\\u00BE])(.+?(?=\\n))',1,23) AS ING_23,
	REGEXP_SUBSTR(INGREDIENTS, '([1-9][0-9]*(?:\/[1-9][0-9])*|[\\u2150-\\u215E-\\u00BC-\\u00BE])(.+?(?=\\n))',1,24) AS ING_24,
	REGEXP_SUBSTR(INGREDIENTS, '([1-9][0-9]*(?:\/[1-9][0-9])*|[\\u2150-\\u215E-\\u00BC-\\u00BE])(.+?(?=\\n))',1,25) AS ING_25,
	INGREDIENTS
from recipes_main
);

-- CLEANING 
-- DID EACH OR/AND SEPARATELY CREATING 5 TABLES
select * from tmp_ingredients
WHERE INGREDIENTS != ''
OR INGREDIENTS != '\n'
OR DIRECTIONS != ''
OR DIRECTIONS != '\n'
OR ING_1 IS NOT NULL
AND RECIPE_ID NOT IN ('145350',
'16096976',
'19682524',
'19682529',
'19682562',
'19682584',
'19682607',
'19682643',
'19682671',
'19682685',
'19682701',
'23436633',
'235698',
'235701',
'239550',
'27538527',
'33016890',
'33882493',
'44891403',
'54139991',
'54206857',
'61952186',
'61952962',
'62021973',
'62023523',
'62023560',
'62025240',
'62025491',
'62026594',
'62027111',
'62028750',
'62029017',
'62029156',
'62029199',
'62029769',
'62029771',
'62029772',
'62029780',
'62029898',
'62031020',
'62031030',
'62031034',
'62031211',
'62031935',
'62032183',
'62033693',
'62034782',
'62035971',
'62036075',
'62036787',
'62036985',
'62037346',
'62039522',
'62041353',
'62043599',
'62047206',
'62048440',
'62049025',
'62049028',
'62049033',
'62049097',
'62049489',
'62049490',
'62051345',
'62051750',
'62052864',
'62053935',
'62055436',
'62057184',
'62057906',
'62058443',
'62061228',
'62061650',
'62063808',
'62063813',
'62064637',
'62067879',
'62068079',
'62068697',
'62069232',
'62069980',
'62072022',
'62072391',
'62073103',
'62074749',
'62089900',
'62091257',
'62092187',
'62094028',
'62095471',
'62095935',
'62098932',
'62102231',
'62103636',
'62103646',
'62103978',
'62106464',
'62106904',
'62109369',
'62109955',
'62111601',
'62119386',
'62122654',
'62124162',
'62124276',
'62124700',
'62129136',
'62142686',
'62145634',
'62148404',
'62148829',
'62150474',
'62150753',
'62152731',
'62159274',
'62161309',
'62167504',
'62168349',
'62177454',
'62177584',
'62178139',
'62189523',
'62200921',
'62213378',
'62227064',
'62228281',
'62239975',
'62248115',
'62248454',
'62256835',
'62260861',
'62264033',
'62264243',
'62292739',
'62296014',
'62296882',
'62302504',
'62303084',
'62303962',
'62311149',
'62313525',
'62313553',
'62314665',
'62320738',
'62324150',
'62326736',
'62328956',
'62329873',
'62339402',
'62345226',
'62359256',
'62362247',
'62362511',
'62364351',
'62366683',
'62377509',
'62381916',
'62383861',
'62384517',
'62385881',
'62393853',
'62398806',
'62399393',
'62400637',
'62406969',
'62407463',
'62429049',
'62433305',
'62437040',
'62446651',
'62448410',
'62449986',
'62453199',
'62457460',
'62461790',
'62462863',
'62462876',
'62467798',
'62470554',
'62470963',
'62478529',
'62486113',
'62488743',
'62493410',
'62507263',
'62507312',
'62512039',
'62516090',
'62516374',
'62518421',
'62518463',
'62521723',
'62530735',
'62534548',
'62541880',
'62543272',
'62545780',
'62545926',
'62552885',
'62557917',
'62560217',
'62563663',
'62572441',
'62578985',
'62582280',
'62587764',
'62590321',
'62592669',
'62593350',
'62597460',
'62604855',
'62607263',
'62607314',
'62608007',
'62620914',
'62621412',
'62623604',
'62628548',
'62635743',
'62635754',
'62635758',
'62638603',
'62641188',
'62641692',
'62652491',
'62656587',
'62685456',
'62692811',
'62706577',
'62708366',
'62708368',
'62708714',
'62710446',
'62719273',
'62723574',
'62723576',
'62729680',
'62730712',
'62737610',
'62741304',
'62743267',
'62752396',
'62752475',
'62754189',
'62754265',
'62755159',
'62755355',
'62757569',
'62760832',
'62766170',
'62766909',
'62773970',
'62779326',
'62789597',
'62789600',
'62796364',
'62800836',
'62814399',
'62828506',
'62829689',
'62832101',
'62832464',
'62841370',
'62842095',
'62863184',
'62866177',
'62868496',
'62883910',
'62886963',
'62896216',
'62898661',
'62898743',
'62901754',
'62902146',
'62902978',
'62924511',
'62933213',
'62935681',
'62939165',
'62939987',
'62944985',
'62948466',
'62950523',
'62953362',
'62956759',
'62957231',
'62957773',
'62968135',
'62971416',
'62978041',
'62981219',
'62990615',
'62994886',
'63001425',
'63009471',
'63032687',
'63032694',
'63038467',
'63041766',
'63046860',
'63055457',
'63055796',
'63059463',
'63061193',
'63063850',
'63066595',
'63081220',
'63095116',
'63097926',
'63098031',
'63116032',
'63117757',
'63119936',
'63124151',
'63125082',
'63131689',
'63131692',
'63139957',
'63140180',
'63143841',
'63151363',
'63152185',
'63163293',
'63164485',
'63164489',
'63167337',
'63169393',
'63177363',
'63177661',
'63178199',
'63180889',
'63181040',
'63191613',
'63194911',
'63195911',
'63200954',
'63209444',
'63211386',
'63213317',
'63215370',
'63217068',
'63226941',
'63238681',
'63243643',
'63253748',
'63258461',
'63269083',
'63280709',
'63281413',
'63283405',
'63307604',
'63310674',
'63321700',
'63327057',
'63336099',
'63337460',
'63340908',
'63355583',
'63356086',
'63365670',
'63384514',
'63384527',
'63385894',
'63386034',
'63386111',
'63388922',
'63394103',
'63409538',
'63411685',
'63414081',
'63418647',
'63422579',
'63422816',
'63427257',
'63431082',
'63434164',
'63437656',
'63440277',
'63440991',
'63443161',
'63462695',
'63468101',
'63482799',
'63482976',
'63483509',
'63491305',
'63502349',
'63505782',
'63506364',
'63510549',
'63516252',
'63524001',
'63528627',
'63530990',
'63544680',
'63544687',
'63544690',
'63555810',
'63562279',
'63562504',
'63578060',
'63580225',
'63587074',
'63587307',
'63590256',
'63590786',
'63590795',
'63591573',
'63599476',
'63603453',
'63606682',
'63614254',
'63615234',
'63615964',
'63620214',
'63620269',
'63620296',
'63626021',
'63631089',
'63633075',
'63633170',
'63642024',
'63642414',
'63649131',
'63655357',
'63655790',
'63655798',
'63662509',
'63667654',
'63668678',
'63668908',
'63670880',
'63680494',
'63681652',
'63686412',
'63690104',
'63692733',
'63699372',
'63708541',
'63713056',
'63713065',
'63717438',
'63719851',
'63720350',
'63723495',
'63724418',
'63732278',
'63733188',
'63734522',
'63734963',
'63735013',
'63740918',
'63743499',
'63743888',
'63751108',
'63751151',
'63751164',
'63752179',
'63756540',
'63766581',
'63773536',
'63780604',
'63780613',
'63787317',
'63789765',
'63789771',
'63791412',
'63795408',
'63798211',
'63798237',
'63798240',
'63799847',
'63800822',
'63804387',
'63809793',
'63811160',
'63811222',
'63816597',
'63821427',
'63832530',
'63843519',
'63843579',
'63846312',
'63848325',
'63849195',
'63850458',
'63853502',
'63853702',
'63855623',
'63859793',
'63865522',
'63874089',
'63886716',
'63892928',
'63893757',
'63897539',
'63898381',
'63905248',
'63905698',
'63924084',
'63930729',
'63933566',
'63938722',
'63941047',
'63951680',
'63964331',
'63967071',
'63974980',
'63979717',
'63980926',
'63998341',
'63998360',
'64002315',
'64012057',
'64016209',
'64016211',
'64024832',
'64024838',
'64026461',
'64032980',
'64042010',
'64057099',
'64066964',
'64079378',
'64083868',
'64099432',
'64112648',
'64126216',
'64135508',
'64135510',
'64135521',
'64135528',
'64138664',
'64138666',
'64138668',
'64138694',
'64149707',
'64149710',
'64151791',
'64162967',
'64169059',
'64178300',
'64189681',
'64193472',
'64198050',
'64207350',
'64209434',
'64217856',
'64222779',
'64222784',
'64223501',
'64224088',
'64227257',
'64229928',
'64231275',
'64232281',
'64243774',
'64243800',
'64249314',
'64249874',
'64251531',
'64255682',
'64261539',
'64286353',
'64287501',
'64287531',
'64290960',
'64302455',
'64303830',
'64305274',
'64306794',
'64311819',
'64312692',
'64315127',
'64316769',
'64337036',
'64339065',
'64341184',
'64348125',
'64351265',
'64352478',
'64356586',
'64358802',
'64358955',
'64359009',
'64359044',
'64359056',
'64359067',
'64361734',
'64373520',
'64382834',
'64385349',
'64386430',
'64387579',
'64389630',
'64392047',
'64394259',
'64395833',
'64401665',
'64403307',
'64403335',
'64405219',
'64405729',
'64409465',
'64410751',
'64412544',
'64412695',
'64420857',
'64421566',
'64427888',
'64428684',
'64429404',
'64431578',
'64437385',
'64443403',
'64443466',
'64446634',
'64453666',
'64454824',
'64462869',
'64466427',
'64466477',
'64466541',
'64466744',
'64466789',
'64466861',
'64467474',
'64467608',
'64468022',
'64468352',
'64469385',
'64469526',
'64469658',
'64469962',
'64470402',
'64470439',
'64471397',
'64471607',
'64472224',
'64480250',
'64485912',
'64495819',
'64500068',
'64501057',
'64501066',
'64501067',
'64501068',
'64501502',
'64501543',
'64501646',
'64502330',
'64502572',
'64502700',
'64504099',
'64507035',
'64507123',
'64507415',
'64509250',
'64509506',
'64510350',
'64511287',
'64511294',
'64511536',
'64511593',
'64511642',
'64512411',
'64512412',
'64512413',
'64514919',
'64515933',
'64516304',
'64516443',
'64516624',
'64516625',
'64516648',
'64517610',
'64518079',
'64519799',
'64519802',
'64520470',
'64520895',
'64522117',
'64523412',
'64523418',
'64523419',
'64524561',
'64525682',
'64526606',
'64530004',
'64530554',
'64530574',
'64530575',
'64533473',
'64535482',
'64536350',
'64536829',
'64537942',
'64537943',
'64539388',
'64540856',
'64543572',
'64543952',
'64547959',
'64549291',
'64553630',
'64554910',
'64557771',
'64559700',
'64560400',
'64561354',
'64561465',
'64570152',
'64571718',
'64573107',
'64573108',
'64573932',
'64576245',
'64577559',
'64581075',
'64582332',
'64583997',
'64585905',
'64585907',
'64593825',
'64594260',
'64594867',
'64595606',
'64604407',
'64605296',
'64606738',
'64608445',
'64611077',
'64616137',
'64616138',
'64621615',
'64622124',
'64625349',
'64627310',
'64627311',
'64631093',
'64631669',
'64632808',
'64634830',
'64641161',
'64642760',
'64642900',
'64650099',
'64650155',
'64650199',
'64653308',
'64653826',
'64654958',
'64656603',
'64658462',
'64660190',
'64664731',
'64664764',
'64664768',
'64665354',
'64666803',
'64666837',
'64669888',
'64677705',
'64678337',
'64678560',
'64678562',
'64678583',
'64687677',
'64687734',
'64687735',
'64692109',
'64694518',
'64697026',
'64697487',
'64697711',
'64702984',
'64703903',
'64713666',
'64714753',
'64716489',
'64717104',
'64718489',
'64723341',
'64724075',
'64724076',
'64727886',
'64729478',
'64735648',
'64742258',
'64746141',
'64746993',
'64747175',
'64758149',
'64760096',
'64760800',
'64768165'
'101386',
'133042',
'139298',
'152195',
'15837700',
'17742480',
'212617',
'213083',
'213693',
'219509',
'219567',
'219579',
'220364',
'220457',
'220815',
'222975',
'239553',
'247065',
'16240491',
'16455317',
'17611358'
);

-- GET THE NUMERIC PORTION OF AMOUNT
SELECT COALESCE(WHOLE_FRAC,WHOLE_UNI_FRAC,UNI_FRAC,FRAC,OUNCE,WHOLE_NUM) AS AMT, ING_1
FROM (
	select RECIPE_ID,
		REGEXP_SUBSTR(ING_1, '^[0-9]{1,3}') AS WHOLE_NUM,
		REGEXP_SUBSTR(ING_1, '^(\\d|\\d\\d|[\\u2150-\\u215E-\\u00BC-\\u00BE]|[1-9]\\s[1-9]+([\/][1-9])*|[1-9]+([\/][1-9])|([1-9]\\s[\\u2150-\\u215E-\\u00BC-\\u00BE]))\\s\\([^)]*\\)') AS OUNCE,
		REGEXP_SUBSTR(ING_1, '^[1-9]+([\/][1-9])') AS FRAC,
		REGEXP_SUBSTR(ING_1, '^[\\u2150-\\u215E-\\u00BC-\\u00BE]') AS UNI_FRAC,
		REGEXP_SUBSTR(ING_1, '[1-9]\\s[\\u2150-\\u215E-\\u00BC-\\u00BE]') AS WHOLE_UNI_FRAC,
		REGEXP_SUBSTR(ING_1, '[1-9]\\s[1-9]+([\/][1-9])*') AS WHOLE_FRAC,
		REGEXP_SUBSTR(ING_1, '\\S*',1,3) AS AMT5,
		ING_1,
		INGREDIENTS
	from tmp_ingredients
) test;


-- GET THE UNIT OF MEASUREMENT V1
SELECT CASE WHEN AMT5 IN ('cups','ounces', 'tablespoons', 'teaspoon', 'cup', 'tablespoon', 'pounds', 'pound', 'fluid', 'slices', 'slice', 'teaspoons', 'sheet', 'sheets', 'quart', 'drops', 'whole' 'gallons', 'large', 'medium', 'small', 'pieces', 'pint' 'cubes', 'links', 'pints', 'quarts', 'box', 'loaf', 'head', 'ears', 'bunch', 'extra-large', 'pickle-size', 'pinch', 'serving', 'stalks', 'stalk', 'extra', 'individual', 'bulbs', 'clove', 'unsliced', 'inch', 'package', 'packet', 'gallon', 'leaves', 'leaf', 'container') THEN AMT5 END AS MEASUREMENT,
ING_1
FROM (
	select RECIPE_ID,
		REGEXP_SUBSTR(ING_1, '^[0-9]{1,3}') AS WHOLE_NUM,
		REGEXP_SUBSTR(ING_1, '^(\\d|\\d\\d|[\\u2150-\\u215E-\\u00BC-\\u00BE]|[1-9]\\s[1-9]+([\/][1-9])*|[1-9]+([\/][1-9])|([1-9]\\s[\\u2150-\\u215E-\\u00BC-\\u00BE]))\\s\\([^)]*\\)') AS OUNCE,
		REGEXP_SUBSTR(ING_1, '^[1-9]+([\/][1-9])') AS FRAC,
		REGEXP_SUBSTR(ING_1, '^[\\u2150-\\u215E-\\u00BC-\\u00BE]') AS UNI_FRAC,
		REGEXP_SUBSTR(ING_1, '[1-9]\\s[\\u2150-\\u215E-\\u00BC-\\u00BE]') AS WHOLE_UNI_FRAC,
		REGEXP_SUBSTR(ING_1, '[1-9]\\s[1-9]+([\/][1-9])*') AS WHOLE_FRAC,
		REGEXP_SUBSTR(ING_1, '\\S*',1,3) AS AMT5,
		ING_1,
		INGREDIENTS
	from tmp_ingredients
) test;


-- GET THE UNIT OF MEASUREMENT V2

SELECT RECIPE_ID, 
AMT, 
CASE WHEN MEASUREMENT1 IS NOT NULL AND MEASUREMENT2 IS NOT NULL THEN CONCAT(MEASUREMENT1, ' ', MEASUREMENT2) END AS COMBO,
COALESCE(MEASUREMENT1,MEASUREMENT2,MEASUREMENT3) AS MEASUREMENT, ING_1
FROM (
	SELECT 
	RECIPE_ID,
	COALESCE(WHOLE_FRAC,WHOLE_UNI_FRAC,UNI_FRAC,FRAC,OUNCE,WHOLE_NUM) AS AMT,
	CASE WHEN FIRST_SPACE IN ('eaches','strips','gram', 'grams','sprig', 'sprigs', 'bag', 'can','cans','cups','ounces', 'tablespoons', 'teaspoon', 'tsp', 'bottle', 'cup', 'tablespoon', 'pounds', 'pound', 'ounce', 'oz', 'fluid', 'slices', 'slice', 'teaspoons', 'sheet', 'sheets', 'quart', 'drops', 'whole' 'gallons', 'pieces', 'pint' 'cubes', 'links', 'pints', 'quarts', 'box', 'loaf', 'head', 'heads', 'ears', 'bunch', 'bunches', 'pickle-size', 'pinch', 'serving', 'stalks', 'stalk', 'individual', 'bulbs', 'clove', 'inch', 'package', 'packages','packet', 'gallon', 'leaves', 'leaf', 'container') THEN FIRST_SPACE END AS MEASUREMENT1,
	CASE WHEN SECOND_SPACE IN ('gram', 'grams','sprig', 'sprigs', 'bag','can','cans','cups','ounces', 'tablespoons', 'teaspoon', 'tsp', 'bottle', 'cup', 'tablespoon', 'pounds', 'pound', 'ounce', 'oz','slices', 'slice', 'teaspoons', 'sheet', 'sheets', 'quart', 'drops', 'whole' 'gallons', 'pieces', 'pint' 'cubes', 'links', 'pints', 'quarts', 'box', 'loaf', 'head', 'ears', 'bunch', 'bunches', 'pickle-size', 'pinch', 'serving', 'stalks', 'stalk', 'individual', 'bulbs', 'clove', 'inch', 'package', 'packages','packet', 'gallon', 'container') THEN SECOND_SPACE END AS MEASUREMENT2,
	CASE WHEN THIRD_SPACE IN ('jar', 'sprig', 'sprigs', 'can','cans','bottle','cups','ounces', 'tablespoons', 'teaspoon', 'tsp', 'bottle', 'cup', 'tablespoon', 'pounds', 'pound', 'oz','slices', 'slice', 'teaspoons', 'sheet', 'sheets', 'quart', 'drops', 'whole' 'gallons', 'pieces', 'pint' 'cubes', 'links', 'pints', 'quarts', 'box', 'loaf', 'bunch', 'bunches', 'pickle-size', 'pinch', 'serving', 'stalks', 'stalk', 'individual', 'bulbs', 'clove', 'inch', 'package', 'packages','packet', 'gallon', 'container') THEN THIRD_SPACE END AS MEASUREMENT3,
	ING_1
	FROM (
		select RECIPE_ID,
			REGEXP_SUBSTR(ING_1, '^[0-9]{1,3}') AS WHOLE_NUM,
			REGEXP_SUBSTR(ING_1, '^(\\d|\\d\\d|[\\u2150-\\u215E-\\u00BC-\\u00BE]|[1-9]\\s[1-9]+([\/][1-9])*|[1-9]+([\/][1-9])|([1-9]\\s[\\u2150-\\u215E-\\u00BC-\\u00BE]))\\s\\([^)]*\\)') AS OUNCE,
			REGEXP_SUBSTR(ING_1, '^[1-9]+([\/][1-9])') AS FRAC,
			REGEXP_SUBSTR(ING_1, '^[\\u2150-\\u215E-\\u00BC-\\u00BE]') AS UNI_FRAC,
			REGEXP_SUBSTR(ING_1, '[1-9]\\s[\\u2150-\\u215E-\\u00BC-\\u00BE]') AS WHOLE_UNI_FRAC,
			REGEXP_SUBSTR(ING_1, '[1-9]\\s[1-9]+([\/][1-9])*') AS WHOLE_FRAC,
			REGEXP_SUBSTR(ING_1, '\\S*',1,3) AS FIRST_SPACE,
			REGEXP_SUBSTR(ING_1, '\\S*',1,5) AS SECOND_SPACE,
			REGEXP_SUBSTR(ING_1, '\\S*',1,7) AS THIRD_SPACE,
			ING_1,
			INGREDIENTS
		from tmp_ingredients
	) test
) amt;


-- FIRST PASS AT INGREDIENTS_1
CREATE TABLE TMP_FIRST_ING (
SELECT RECIPE_ID,
		CASE WHEN MEASUREMENT IS NOT NULL THEN TRIM(CONCAT(AMT, ' ', MEASUREMENT)) ELSE AMT END AS MEASUREMENT,
        ING_1
FROM (
SELECT RECIPE_ID,
	   AMT,
	   COALESCE(COMBO, MEASUREMENT) AS MEASUREMENT,
       ING_1
FROM (
SELECT RECIPE_ID, 
AMT, 
CASE WHEN MEASUREMENT1 IS NOT NULL AND MEASUREMENT2 IS NOT NULL THEN CONCAT(MEASUREMENT1, ' ', MEASUREMENT2) END AS COMBO,
COALESCE(MEASUREMENT1,MEASUREMENT2,MEASUREMENT3) AS MEASUREMENT, ING_1
FROM (
	SELECT 
	RECIPE_ID,
	COALESCE(OUNCE,WHOLE_FRAC,WHOLE_UNI_FRAC,UNI_FRAC,FRAC,WHOLE_NUM) AS AMT,
	CASE WHEN FIRST_SPACE IN ('eaches','strips','gram', 'grams','sprig', 'sprigs', 'bag', 'can','cans','cups','ounces', 'tablespoons', 'teaspoon', 'tsp', 'bottle', 'cup', 'tablespoon', 'pounds', 'pound', 'ounce', 'oz', 'fluid', 'slices', 'slice', 'teaspoons', 'sheet', 'sheets', 'quart', 'drops', 'whole' 'gallons', 'pieces', 'pint' 'cubes', 'links', 'pints', 'quarts', 'box', 'loaf', 'head', 'heads', 'ears', 'bunch', 'bunches', 'pickle-size', 'pinch', 'serving', 'stalks', 'stalk', 'individual', 'bulbs', 'clove', 'inch', 'package', 'packages','packet', 'gallon', 'leaves', 'leaf', 'container') THEN FIRST_SPACE END AS MEASUREMENT1,
	CASE WHEN SECOND_SPACE IN ('gram', 'grams','sprig', 'sprigs', 'bag','can','cans','cups','ounces', 'tablespoons', 'teaspoon', 'tsp', 'bottle', 'cup', 'tablespoon', 'pounds', 'pound', 'ounce', 'oz','slices', 'slice', 'teaspoons', 'sheet', 'sheets', 'quart', 'drops', 'whole' 'gallons', 'pieces', 'pint' 'cubes', 'links', 'pints', 'quarts', 'box', 'loaf', 'head', 'ears', 'bunch', 'bunches', 'pickle-size', 'pinch', 'serving', 'stalks', 'stalk', 'individual', 'bulbs', 'clove', 'inch', 'package', 'packages','packet', 'gallon', 'container') THEN SECOND_SPACE END AS MEASUREMENT2,
	CASE WHEN THIRD_SPACE IN ('jar', 'sprig', 'sprigs', 'can','cans','bottle','cups','ounces', 'tablespoons', 'teaspoon', 'tsp', 'bottle', 'cup', 'tablespoon', 'pounds', 'pound', 'oz','slices', 'slice', 'teaspoons', 'sheet', 'sheets', 'quart', 'drops', 'whole' 'gallons', 'pieces', 'pint' 'cubes', 'links', 'pints', 'quarts', 'box', 'loaf', 'bunch', 'bunches', 'pickle-size', 'pinch', 'serving', 'stalks', 'stalk', 'individual', 'bulbs', 'clove', 'inch', 'package', 'packages','packet', 'gallon', 'container') THEN THIRD_SPACE END AS MEASUREMENT3,
	ING_1
	FROM (
		select RECIPE_ID,
			REGEXP_SUBSTR(ING_1, '^[0-9]{1,3}') AS WHOLE_NUM,
			REGEXP_SUBSTR(ING_1, '^(\\d|\\d\\d|[\\u2150-\\u215E-\\u00BC-\\u00BE]|[1-9]\\s[1-9]+([\/][1-9])*|[1-9]+([\/][1-9])|([1-9]\\s[\\u2150-\\u215E-\\u00BC-\\u00BE]))\\s\\([^)]*\\)') AS OUNCE,
			REGEXP_SUBSTR(ING_1, '^[1-9]+([\/][1-9])') AS FRAC,
			REGEXP_SUBSTR(ING_1, '^[\\u2150-\\u215E-\\u00BC-\\u00BE]') AS UNI_FRAC,
			REGEXP_SUBSTR(ING_1, '[1-9]\\s[\\u2150-\\u215E-\\u00BC-\\u00BE]') AS WHOLE_UNI_FRAC,
			REGEXP_SUBSTR(ING_1, '[1-9]\\s[1-9]+([\/][1-9])*') AS WHOLE_FRAC,
			REGEXP_SUBSTR(ING_1, '\\S*',1,3) AS FIRST_SPACE,
			REGEXP_SUBSTR(ING_1, '\\S*',1,5) AS SECOND_SPACE,
			REGEXP_SUBSTR(ING_1, '\\S*',1,7) AS THIRD_SPACE,
			ING_1,
			INGREDIENTS
		from tmp_ing6
	) test
) amt
) measure
) final
);


-- GETTING THE INGREDIENT PART OF STRING V1
select MEASUREMENT,
		LENGTH(MEASUREMENT) AS M_LENGTH,
        LENGTH(ING_1) AS ING_LENGTH,
		CASE WHEN REGEXP_LIKE(ING_1, '[\\u2150-\\u215E-\\u00BC-\\u00BE]') THEN TRIM(SUBSTR(ING_1, LENGTH(MEASUREMENT)-1, (LENGTH(ING_1))-(LENGTH(MEASUREMENT)+1)))
		ELSE TRIM(SUBSTR(ING_1, LENGTH(MEASUREMENT)+1, (LENGTH(ING_1)+1)-(LENGTH(MEASUREMENT)+1))) END AS ING,
        ING_1
from TMP_FIRST_ING
;

-- GETTING THE INGREDIENT PART OF STRING V2
select 
	RECIPE_ID,
    MEASUREMENT,
	TRIM(SUBSTR(ING_1, CHAR_LENGTH(MEASUREMENT)+1,(LENGTH(ING_1)+1)-(CHAR_LENGTH(MEASUREMENT)+1))) AS INGREDIENT,
	ING_1
from TMP_FIRST_ING
;

-- CREATE TABLE FINAL TABLE
CREATE TABLE first_ing (
select 
	RECIPE_ID,
    MEASUREMENT,
	TRIM(SUBSTR(ING_1, CHAR_LENGTH(MEASUREMENT)+1,(LENGTH(ING_1)+1)-(CHAR_LENGTH(MEASUREMENT)+1))) AS INGREDIENT
from TMP_FIRST_ING
)
;